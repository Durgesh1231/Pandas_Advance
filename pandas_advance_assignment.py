# -*- coding: utf-8 -*-
"""Pandas Advance Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vF0dQawF4fbJH70mw77OOl-CEwjVplYy
"""

### ANs 1.

import pandas as pd

# 1. pd.read_csv() - Reads data from a CSV file into a DataFrame
# Example: This will read data from a CSV file into a DataFrame.
df = pd.read_csv('data.csv')  # Example usage (assumes 'data.csv' exists)
print(df)

# 2. df.head() - Displays the first 5 rows of the DataFrame
# Example: This will output the first 5 rows of the DataFrame.
df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [5, 6, 7, 8]})
print(df.head())  # Output first 5 rows

# 3. df.describe() - Generates descriptive statistics of DataFrame columns
# Example: This will give descriptive statistics for the columns like mean, std, etc.
print(df.describe())

# 4. pd.concat() - Concatenates two or more DataFrames along rows or columns
# Example: This will concatenate two DataFrames vertically (row-wise).
df2 = pd.DataFrame({'A': [10, 20], 'B': [30, 40]})
df_concat = pd.concat([df, df2], axis=0)
print(df_concat)

# 5. df.drop() - Drops specified labels (rows or columns) from the DataFrame
# Example: This will drop the column 'B' from the DataFrame.
df_dropped = df.drop(columns=['B'])  # Drops column B
print(df_dropped)


### ANS 2.

def reindex_dataframe(df):
    """
    This function re-indexes the DataFrame with a new index starting from 1
    and incrementing by 2 for each row.
    """
    # Creating new index starting from 1 and incrementing by 2
    df.index = range(1, len(df) * 2, 2)
    return df

# Example DataFrame
df = pd.DataFrame({'A': [10, 20, 30], 'B': [40, 50, 60], 'C': [70, 80, 90]})
df_reindexed = reindex_dataframe(df)
print(df_reindexed)



### ANS 3.

def sum_first_three_values(df):
    """
    This function calculates and prints the sum of the first three values
    in the 'Values' column of the DataFrame.
    """
    # Summing the first three values of the 'Values' column
    sum_values = df['Values'][:3].sum()
    print(f"Sum of first three values: {sum_values}")

# Example DataFrame
df = pd.DataFrame({'Values': [10, 20, 30, 40, 50]})
sum_first_three_values(df)



### ANS 4.

def count_words(df):
    """
    This function adds a new column 'Word_Count' to the DataFrame that
    contains the number of words in the 'Text' column.
    """
    # Creating a new column 'Word_Count' that contains the number of words in 'Text' column
    df['Word_Count'] = df['Text'].apply(lambda x: len(str(x).split()))
    return df

# Example DataFrame
df = pd.DataFrame({'Text': ['Hello world', 'Python is awesome', 'Data Science']})
df_with_word_count = count_words(df)
print(df_with_word_count)



### ANS 5.

# DataFrame.size: Returns the total number of elements (rows * columns) in the DataFrame
# DataFrame.shape: Returns a tuple representing the dimensions of the DataFrame
# in the form (number of rows, number of columns)

df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})
print(df.size)  # Output: 4 (total number of elements)
print(df.shape)  # Output: (2, 2) (2 rows, 2 columns)


### ANS 6.

# Use pd.read_excel() to read an Excel file
# This function reads the Excel file and returns a DataFrame

df = pd.read_excel('data.xlsx')  # Assuming 'data.xlsx' is the file name
print(df)


### ANS 7.

def extract_username(df):
    """
    This function creates a new column 'Username' by extracting the part
    before the '@' symbol in the 'Email' column.
    """
    # Creating a new column 'Username' that contains the part before '@' in the 'Email' column
    df['Username'] = df['Email'].apply(lambda x: x.split('@')[0])
    return df

# Example DataFrame
df = pd.DataFrame({'Email': ['john.doe@example.com', 'jane.smith@domain.com']})
df_with_username = extract_username(df)
print(df_with_username)



### ANS 8.

def select_filtered_rows(df):
    """
    This function filters the rows where column 'A' > 5 and column 'B' < 10,
    and returns the selected rows as a new DataFrame.
    """
    # Filtering rows where column 'A' > 5 and column 'B' < 10
    filtered_df = df[(df['A'] > 5) & (df['B'] < 10)]
    return filtered_df

# Example DataFrame
df = pd.DataFrame({
    'A': [3, 8, 6, 2, 9],
    'B': [5, 2, 9, 3, 1],
    'C': [1, 7, 4, 5, 2]
})

filtered_df = select_filtered_rows(df)
print(filtered_df)



### ANS 9.

import pandas as pd

def calculate_statistics(df):
    """
    This function calculates and prints the mean, median, and standard deviation
    of the 'Values' column in the DataFrame.
    """
    mean = df['Values'].mean()
    median = df['Values'].median()
    std_dev = df['Values'].std()

    print(f"Mean: {mean}")
    print(f"Median: {median}")
    print(f"Standard Deviation: {std_dev}")

# Example DataFrame
df = pd.DataFrame({'Values': [10, 20, 30, 40, 50]})
calculate_statistics(df)


### ANS 10.

def calculate_moving_average(df):
    """
    This function calculates the 7-day moving average of the 'Sales' column
    and stores it in a new column 'MovingAverage'.
    The moving average is calculated using a rolling window of size 7.
    """
    df['MovingAverage'] = df['Sales'].rolling(window=7).mean()
    return df

# Example DataFrame
df = pd.DataFrame({
    'Sales': [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],
    'Date': pd.date_range(start='2023-01-01', periods=10, freq='D')
})
df_with_moving_avg = calculate_moving_average(df)
print(df_with_moving_avg)



### ANS 11.

def add_weekday_column(df):
    """
    This function creates a new column 'Weekday' containing the weekday name
    corresponding to each date in the 'Date' column.
    """
    df['Weekday'] = df['Date'].dt.day_name()
    return df

# Example DataFrame
df = pd.DataFrame({
    'Date': pd.to_datetime(['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04'])
})
df_with_weekday = add_weekday_column(df)
print(df_with_weekday)


### ANS 12.


def filter_dates(df):
    """
    This function filters and selects rows where the 'Date' is between '2023-01-01' and '2023-01-31'.
    """
    start_date = pd.to_datetime('2023-01-01')
    end_date = pd.to_datetime('2023-01-31')
    filtered_df = df[(df['Date'] >= start_date) & (df['Date'] <= end_date)]
    return filtered_df

# Example DataFrame
df = pd.DataFrame({
    'Date': pd.to_datetime(['2023-01-01', '2023-01-15', '2023-02-01']),
    'Value': [10, 20, 30]
})
filtered_df = filter_dates(df)
print(filtered_df)



### ANS 13.

import pandas as pd  # Import the pandas library to use its functions